name: Benchmark Start Comment

on:
  workflow_run:
    workflows: ["Run Benchmarks"]
    types: [in_progress]

jobs:
  post-start-comment:
    if: github.event.workflow_run.event == 'issue_comment'
    runs-on: ubuntu-latest
    permissions:
      issues: write
    #   pull-requests: write ??????
    #   issues: write ????
    steps:
      - name: Print event payload
        run: cat $GITHUB_EVENT_PATH

      - name: Wait for comment-id artifact to be available
        run: |
          ARTIFACT_NAME="comment-id"
          echo "Waiting for artifact '$ARTIFACT_NAME' to be available..."
          while true; do
            ARTIFACTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/artifacts")
            FOUND=$(echo "$ARTIFACTS" | jq -r --arg NAME "$ARTIFACT_NAME" '.artifacts[] | select(.name==$NAME) | .id')
            if [ -n "$FOUND" ]; then
              echo "Artifact '$ARTIFACT_NAME' is available with id: $FOUND"
              break
            else
              echo "Artifact '$ARTIFACT_NAME' not yet available; waiting..."
            fi
            sleep 5
          done

      - name: Download comment-id artifact
        uses: actions/download-artifact@v4
        with:
          name: comment-id
          path: .
          repository: ${{ github.repository }}
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Read Comment ID from file
        id: read_comment_id
        run: |
          COMMENT_ID=$(cat comment_id.txt)
          echo "Comment ID is: $COMMENT_ID"
          echo "::set-output name=comment_id::$COMMENT_ID"

      - name: Update the existing comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commentId = parseInt("${{ steps.read_comment_id.outputs.comment_id }}");
            // Retrieve the current comment content
            const { data: existingComment } = await github.rest.issues.getComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId
            });
            const appendedText = "\nðŸš€ Benchmarks have started.";
            const newBody = existingComment.body + appendedText;
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId,
              body: newBody
            });
