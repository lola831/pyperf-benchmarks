name: Run Benchmarks

on:
  issue_comment:
    types: [created]

jobs:
  check-permission:
    runs-on: ubuntu-latest
    permissions:
        contents: read
    if: >
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, 'run benchmarks')
    steps:
      - name: Print event payload
        run: cat $GITHUB_EVENT_PATH

      - name: Check user's permission level
        uses: actions/github-script@v7
        with:
          script: |
            const username = context.payload.comment.user.login;
            const { data } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: username,
            });
            const perm = data.permission;
            // remove console.log ---------------------- !!!!!!!
            console.log(`User ${username} has permission: ${perm}`);
            // Fail the job if the permission is not admin or write
            if (perm !== 'admin') {
              throw new Error(`User does not have sufficient permissions to run the benchmarks.`);
            }

  run-benchmarks:
    needs: check-permission
    runs-on: ubuntu-latest
    permissions:
        pull-requests: write
    steps:
      - name: Benchmarks Started Comment
        uses: actions/github-script@v7
        with:
          script: |
            const commentId = context.payload.comment.id;
            const originalBody = context.payload.comment.body;
            // Append a message to indicate benchmarks have started running
            const newBody = `${originalBody}\n\nðŸš€ Benchmarks have started running...`;
            // Update the comment with the new body text
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId,
              body: newBody,
            });

      - name: Fetch PR Details
        id: pr_info
        uses: actions/github-script@v7
        with:
            script: |
              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
              });
              core.setOutput('base', pr.data.base.ref)
              core.setOutput('head', pr.data.head.ref)
              core.setOutput('mergeable', pr.data.mergeable)

      - name: Set PR Details to Environment Variables
        run: |
          echo "BASE_BRANCH=${{ steps.pr_info.outputs.base }}" >> $GITHUB_ENV
          if [ "${{ steps.pr_info.outputs.mergeable }}" = "true" ]; then
            echo "COMPARE_BRANCH=refs/pull/${{ github.event.issue.number }}/merge" >> $GITHUB_ENV
          else
            echo "COMPARE_BRANCH=${{ steps.pr_info.outputs.head }}" >> $GITHUB_ENV
          fi

    #   - name: Print PR Details
    #     run: |
    #       echo "COMPARE_BRANCH: $COMPARE_BRANCH"
    #       echo "BASE_BRANCH: $BASE_BRANCH"

      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BASE_BRANCH }}
          path: base
          persist-credentials: false

      - name: Checkout compare branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.COMPARE_BRANCH }}
          path: compare
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install pyperf
        run: |
          python -m pip install --upgrade pip
          pip install pyperf

      # should run benchmarks simulataneously?
      - name: Run benchmark on base branch
        working-directory: base
        run: python benchmarks.py -o ../base.json

      - name: Run benchmark on compare branch
        working-directory: compare
        run: python benchmarks.py -o ../head.json

      - name: Compare benchmarks results
        id: compare
        run: |
          RESULTS=$(python -m pyperf compare_to --table --table-format=md base.json head.json)
          echo "Benchmark comparison results:"
          echo "$RESULTS"
          # Store the multi-line results in $GITHUB_OUTPUT using heredoc syntax:
          echo "RESULTS<<EOF" >> $GITHUB_OUTPUT
          echo "$RESULTS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post benchmark results
        uses: actions/github-script@v7
        with:
          script: |
            const commentId = context.payload.comment.id;
            const result = `\n${{ steps.compare.outputs.RESULTS }}`;
            const newBody = `ðŸš€ Benchmarks completed.\n\n${result}`;
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId,
              body: newBody,
            });
